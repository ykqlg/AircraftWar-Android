Index: app/src/main/java/com/example/testpro/application/GameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.testpro.application;\r\n\r\nimport android.content.ComponentName;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.ServiceConnection;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.media.MediaPlayer;\r\nimport android.os.IBinder;\r\nimport android.util.Log;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.example.testpro.MainActivity;\r\nimport com.example.testpro.MusicService;\r\nimport com.example.testpro.R;\r\nimport com.example.testpro.aircraft.AbstractAircraft;\r\nimport com.example.testpro.aircraft.BossEnemy;\r\nimport com.example.testpro.aircraft.EliteEnemy;\r\nimport com.example.testpro.aircraft.HeroAircraft;\r\nimport com.example.testpro.aircraft.MobEnemy;\r\nimport com.example.testpro.basic.AbstractFlyingObject;\r\nimport com.example.testpro.bullet.BaseBullet;\r\nimport com.example.testpro.bullet.EnemyBullet;\r\nimport com.example.testpro.bullet.HeroBullet;\r\nimport com.example.testpro.enemy_factory.BossFactory;\r\nimport com.example.testpro.enemy_factory.EliteFactory;\r\nimport com.example.testpro.enemy_factory.EnemyFactory;\r\nimport com.example.testpro.enemy_factory.MobFactory;\r\nimport com.example.testpro.prop.AbstractProp;\r\nimport com.example.testpro.prop.BloodProp;\r\nimport com.example.testpro.prop.BombProp;\r\nimport com.example.testpro.prop.BulletProp;\r\nimport com.google.androidgamesdk.GameActivity;\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\npublic abstract class GameView extends SurfaceView implements SurfaceHolder.Callback,Runnable{\r\n\r\n    //鼠标坐标\r\n    public float x , y ;\r\n\r\n//    int screenWidth = 480, screenHeight = 800;\r\n    int screenWidth = MainActivity.screenWidth;\r\n    int screenHeight = MainActivity.screenHeight;\r\n    boolean mbLoop = true; //控制绘画线程的标志位\r\n    public SurfaceHolder mSurfaceHolder;\r\n    public Canvas canvas;  //绘图的画布\r\n    public Paint mPaint;\r\n\r\n    public int backGroundTop=0;\r\n    public final HeroAircraft heroAircraft;\r\n    public float eliteEnemyCreatePro = 0.4f;\r\n\r\n    public int enemyMaxNumber;\r\n    public List<AbstractAircraft> enemyAircrafts;\r\n    public List<BaseBullet> enemyBullets;\r\n    public List<BaseBullet> heroBullets;\r\n    public   List<AbstractProp> props;\r\n    public EnemyFactory enemyFactory;\r\n    public AbstractAircraft enemyAircraft;\r\n    /**\r\n     * Scheduled 线程池，用于任务调度\r\n     */\r\n    public final ScheduledExecutorService executorService;\r\n    public static int score = 0;\r\n\r\n    /**\r\n     * 时间间隔(ms)，控制刷新频率\r\n     */\r\n    public int timeInterval = 20;\r\n    public int time = 0;\r\n    /**\r\n     * 周期（ms)\r\n     * 指示子弹的发射、敌机的产生频率\r\n     */\r\n    public int cycleDuration = 250;\r\n    public int cycleTime = 0;\r\n\r\n    public boolean gameOverFlag = false;\r\n    protected int bossScoreThreshold = 800 ;\r\n    protected boolean bossDied = true;\r\n    protected boolean bossHappened = false;\r\n//    protected MusicThread musicThread;\r\n    protected int lastScore;\r\n    protected int cycleTimeFlag=0;\r\n    public static int mode=1;\r\n\r\n    //音效\r\n    protected MusicService musicService;\r\n    public static MusicService.MyBinder myBinder;\r\n    private Connect conn;\r\n    private Intent intent;\r\n\r\n    public GameView(Context context) {\r\n\r\n        super(context);\r\n        mbLoop = true;//画布循环渲染\r\n        mPaint = new Paint();  //设置画笔\r\n        mSurfaceHolder = this.getHolder();\r\n        mSurfaceHolder.addCallback(this);//发生回调时处理\r\n        this.setFocusable(true);\r\n\r\n        loading_img();//加载图片\r\n        x = MainActivity.screenWidth / 2;\r\n        y = MainActivity.screenHeight - ImageManager.HERO_IMAGE.getHeight();\r\n\r\n        //Scheduled 线程池，用于定时任务调度\r\n        executorService = new ScheduledThreadPoolExecutor(1);\r\n\r\n        heroAircraft = HeroAircraft.getHeroAircraft();\r\n        enemyAircrafts = new LinkedList<>();\r\n        heroBullets = new LinkedList<>();\r\n        enemyBullets = new LinkedList<>();\r\n        props = new LinkedList<>();\r\n\r\n        //音效\r\n\r\n        Log.i(\"music demo\",\"bind service\");\r\n        conn = new Connect();\r\n        intent = new Intent(this.getContext(),MusicService.class);\r\n        this.getContext().bindService(intent,conn, Context.BIND_AUTO_CREATE);\r\n    }\r\n\r\n    class Connect implements ServiceConnection {\r\n\r\n        @Override\r\n        public void onServiceConnected(ComponentName name, IBinder service){\r\n            Log.i(\"music demo\",\"Service Connnected!!!!!!\");\r\n            myBinder = (MusicService.MyBinder)service;\r\n            if(ModeItemActivity.musicFlag){\r\n                myBinder.playBGM();\r\n//                myBinder.playBossMusic();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onServiceDisconnected(ComponentName componentName) {\r\n            Log.i(\"music demo\",\"Service Disconnnected!!!!!!\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    @Override\r\n    public void run () {\r\n        action();\r\n    }\r\n\r\n    public void action(){\r\n\r\n        Runnable task = () -> {\r\n//            time += timeInterval;\r\n\r\n            // 周期性执行（控制频率）\r\n            if (timeCountAndNewCycleJudge()) {\r\n//                System.out.println(\"time:\"+time);\r\n                // 新敌机产生\r\n                enemyProduce();\r\n                // 飞机射出子弹\r\n                shootAction();\r\n            }\r\n            //这边的x，y一开始默认都为0\r\n\r\n            heroAircraft.setLocation(x, y-ImageManager.HERO_IMAGE.getHeight()*1.5f);\r\n\r\n            // 子弹移动\r\n            bulletsMoveAction();\r\n\r\n            // 飞机移动\r\n            aircraftsMoveAction();\r\n\r\n            // 道具移动\r\n            propsMoveAction();\r\n\r\n            // 撞击检测\r\n            try {\r\n                crashCheckAction();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            // 后处理\r\n            postProcessAction();\r\n\r\n            //每个时刻重新绘制界面\r\n            draw();\r\n\r\n\r\n            // 游戏结束检查\r\n            if (heroAircraft.getHp() <= 0) {\r\n                // 游戏结束\r\n                executorService.shutdown();\r\n\r\n                //游戏结束音效\r\n                if(ModeItemActivity.musicFlag){\r\n                    myBinder.playGameOver();\r\n                System.out.println(\"Game Over!\");\r\n                }\r\n                gameOverFlag = true;\r\n                Intent intent = new Intent(this.getContext(),InputActivity.class);\r\n                this.getContext().startActivity(intent);\r\n                this.getContext().unbindService(conn);\r\n\r\n            }\r\n\r\n        };\r\n        /**\r\n         * 以固定延迟时间进行执行\r\n         * 本次任务执行完成后，需要延迟设定的延迟时间，才会执行新的任务\r\n         */\r\n        executorService.scheduleWithFixedDelay(task, timeInterval, timeInterval, TimeUnit.MILLISECONDS);\r\n    }\r\n\r\n\r\n    //***********************\r\n    //      Action 各部分\r\n    //***********************\r\n\r\n    public boolean timeCountAndNewCycleJudge() {\r\n        cycleTime += timeInterval;\r\n        if (cycleTime >= cycleDuration && cycleTime - timeInterval < cycleTime) {\r\n            // 跨越到新的周期\r\n            cycleTime %= cycleDuration;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void shootAction() {\r\n\r\n        // 敌机射击\r\n        for(int i = 0; i<enemyAircrafts.size(); i++){\r\n\r\n            enemyBullets.addAll(enemyAircrafts.get(i).shoot());\r\n        }\r\n        // 英雄射击\r\n        heroBullets.addAll(heroAircraft.shoot());\r\n\r\n\r\n    }\r\n\r\n    public void bulletsMoveAction() {\r\n        for (int i = 0; i<heroBullets.size(); i++) {\r\n            heroBullets.get(i).forward();\r\n        }\r\n        for (int i = 0; i<enemyBullets.size(); i++) {\r\n            enemyBullets.get(i).forward();\r\n        }\r\n    }\r\n\r\n    public abstract void enemyProduce();\r\n\r\n    public void aircraftsMoveAction() {\r\n        for(int i = 0 ; i<enemyAircrafts.size();i++){\r\n            enemyAircrafts.get(i).forward();\r\n\r\n        }\r\n    }\r\n\r\n    protected void propsMoveAction(){\r\n        for(int i = 0; i<props.size();i++){\r\n            props.get(i).forward();\r\n        }\r\n    }\r\n\r\n    protected boolean createBoss(){\r\n        //当前得分超出当前阈值一定差值且boss已死亡，避免出现多架boss机\r\n        if(score-lastScore >= bossScoreThreshold && bossDied)\r\n        {\r\n            this.bossDied = false;//标注boss生成\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected void difficultyIncrease(){\r\n        //以boss机被消灭作为一轮的结束，每轮新开始时，游戏难度上升\r\n        if (bossDied && bossHappened) {\r\n            //敌机产生周期、英雄机射击、敌机射击周期减小\r\n            cycleDuration -= 10;\r\n            //boss产生阈值提高\r\n            bossScoreThreshold = bossScoreThreshold - 50;\r\n            //精英机产生比例提高\r\n            eliteEnemyCreatePro = eliteEnemyCreatePro + 0.1f;\r\n            //敌机属性增幅\r\n            EnemyFactory eliteFactory = new EliteFactory();\r\n            eliteFactory.bloodUp();\r\n            eliteFactory.speedUp();\r\n\r\n            EnemyFactory mobFactory = new MobFactory();\r\n            mobFactory.bloodUp();\r\n            mobFactory.speedUp();\r\n            //敌机数目最大值增加\r\n            enemyMaxNumber++;\r\n            bossHappened = false;\r\n            System.out.println(\"提高难度！精英机产生概率：\" + eliteEnemyCreatePro +\r\n                    \", 精英机血量提高为：\" + eliteFactory.getHp() +\r\n                    \", 普通机血量提高为：\" + mobFactory.getHp() + \", 敌机速度提高\");\r\n            System.out.println(\"敌机数目最大值变为：\" + enemyMaxNumber + \",boss机产生阈值变为：\" + bossScoreThreshold);\r\n        }\r\n    }\r\n\r\n    protected void difficultyIncreaseEverytime(){\r\n\r\n        cycleTimeFlag++;\r\n        if(cycleTimeFlag == 10){\r\n            cycleTimeFlag = 0;\r\n            //精英机产生比例提高\r\n            eliteEnemyCreatePro += 0.01;\r\n            //敌机产生周期、英雄机射击、敌机射击周期减小\r\n            cycleDuration -= 1;\r\n            System.out.println(\"提高难度！精英机产生概率：\" + eliteEnemyCreatePro +\r\n                    \", 敌机周期：\" + cycleDuration);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    protected void bombEmpty(AbstractProp abstractProp){\r\n        for(int i =0 ; i<enemyAircrafts.size();i++){\r\n            AbstractAircraft abstractAircraft = enemyAircrafts.get(i);\r\n            if(abstractAircraft instanceof BossEnemy){\r\n                continue;\r\n            }\r\n            else{\r\n                abstractProp.addSubscribe(abstractAircraft);\r\n            }\r\n        }\r\n        for(int i = 0; i<enemyBullets.size();i++){\r\n            BaseBullet baseBullet = enemyBullets.get(i);\r\n            abstractProp.addSubscribe(baseBullet);\r\n        }\r\n    }\r\n\r\n    protected void crashCheckAction() throws InterruptedException {\r\n        // 敌机子弹攻击英雄\r\n        for (int i=0;i<enemyBullets.size();i++) {\r\n            BaseBullet bullet = enemyBullets.get(i);\r\n            if (bullet.notValid()) {\r\n                continue;\r\n            }\r\n            if(heroAircraft.crash(bullet)){\r\n                //有点问题\r\n                heroAircraft.decreaseHp(bullet.getPower());\r\n                bullet.vanish();\r\n            }\r\n        }\r\n\r\n        // 英雄子弹攻击敌机\r\n        for (int i =0; i<heroBullets.size();i++) {\r\n\r\n            BaseBullet bullet = heroBullets.get(i);\r\n            if (bullet.notValid()) {\r\n                continue;\r\n            }\r\n            for (int j=0; j<enemyAircrafts.size();j++) {\r\n                AbstractAircraft enemyAircraft = enemyAircrafts.get(j);\r\n                if (enemyAircraft.notValid()) {\r\n                    // 已被其他子弹击毁的敌机，不再检测\r\n                    // 避免多个子弹重复击毁同一敌机的判定\r\n                    continue;\r\n                }\r\n                if (enemyAircraft.crash(bullet)) {\r\n                    // 敌机撞击到英雄机子弹\r\n                    // 敌机损失一定生命值\r\n                    enemyAircraft.decreaseHp(bullet.getPower());\r\n                    bullet.musicEffect();\r\n                    bullet.vanish();\r\n\r\n                    if (enemyAircraft.notValid()) {\r\n                        //根据击落敌机的类型判断\r\n\r\n                        if(enemyAircraft instanceof MobEnemy){\r\n                            //击败普通机 score+30\r\n                            score = score+30;\r\n\r\n                        }\r\n                        if(enemyAircraft instanceof BossEnemy){\r\n                            //击败boss机 score+30\r\n                            score = score+50;\r\n                            lastScore = score;//重置boss生成阈值\r\n                            bossDied = true;//标记boss已死亡\r\n                            enemyAircraft.vanish();\r\n                            ((BossEnemy) enemyAircraft).generateProp(props);\r\n                        }\r\n\r\n                        // 获得分数，产生道具补给\r\n                        if(enemyAircraft instanceof EliteEnemy){\r\n                            //击败精英机 score+40;产生道具\r\n                            score = score+40;\r\n\r\n                            ((EliteEnemy) enemyAircraft).generateProp(props);\r\n                        }\r\n                    }\r\n                }\r\n                // 英雄机 与 敌机 相撞，均损毁\r\n                if (enemyAircraft.crash(heroAircraft) || heroAircraft.crash(enemyAircraft)) {\r\n                    enemyAircraft.vanish();\r\n                    heroAircraft.decreaseHp(Integer.MAX_VALUE);\r\n                }\r\n            }\r\n        }\r\n\r\n        //  我方获得道具，道具生效\r\n        for(int i = 0; i< props.size();i++){\r\n            AbstractProp prop = props.get(i);\r\n            if(prop.crash(heroAircraft) || heroAircraft.crash(prop)){\r\n                if(prop instanceof BombProp){\r\n                    bombEmpty(prop);\r\n                    prop.influence(heroAircraft);\r\n\r\n                }\r\n                else{\r\n                    prop.influence(heroAircraft);\r\n                }\r\n                prop.vanish();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void postProcessAction() {\r\n        enemyBullets.removeIf(AbstractFlyingObject::notValid);\r\n        enemyAircrafts.removeIf(AbstractFlyingObject::notValid);\r\n        heroBullets.removeIf(AbstractFlyingObject::notValid);\r\n        props.removeIf(AbstractFlyingObject::notValid);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //***********************\r\n    //      Paint 各部分\r\n    //***********************\r\n\r\n    public void loading_img() {\r\n\r\n        if(mode == 1){\r\n            ImageManager.BACKGROUND_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.bg);\r\n        }\r\n        else if(mode == 2){\r\n            ImageManager.BACKGROUND_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.bg3);\r\n        }\r\n        else if(mode == 3){\r\n            ImageManager.BACKGROUND_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.bg4);\r\n        }\r\n        ImageManager.HERO_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.hero);\r\n        ImageManager.MOB_ENEMY_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.mob);\r\n        ImageManager.BOSS_ENEMY_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.boss);\r\n        ImageManager.ELITE_ENEMY_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.elite);\r\n        ImageManager.ENEMY_BULLET_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.bullet_enemy);\r\n        ImageManager.HERO_BULLET_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.bullet_hero);\r\n        ImageManager.BLOOD_PROP_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.prop_blood);\r\n        ImageManager.BOMB_PROP_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.prop_bomb);\r\n        ImageManager.BULLET_PROP_IMAGE = BitmapFactory.decodeResource(getResources(), R.drawable.prop_bullet);\r\n\r\n\r\n        ImageManager.CLASSNAME_IMAGE_MAP.put(HeroAircraft.class.getName(), ImageManager.HERO_IMAGE);\r\n        ImageManager.CLASSNAME_IMAGE_MAP.put(MobEnemy.class.getName(), ImageManager.MOB_ENEMY_IMAGE);\r\n        ImageManager.CLASSNAME_IMAGE_MAP.put(EliteEnemy.class.getName(), ImageManager.ELITE_ENEMY_IMAGE);\r\n        ImageManager.CLASSNAME_IMAGE_MAP.put(EnemyBullet.class.getName(), ImageManager.ENEMY_BULLET_IMAGE);\r\n        ImageManager.CLASSNAME_IMAGE_MAP.put(HeroBullet.class.getName(), ImageManager.HERO_BULLET_IMAGE);\r\n        ImageManager.CLASSNAME_IMAGE_MAP.put(BossEnemy.class.getName(), ImageManager.BOSS_ENEMY_IMAGE);\r\n        ImageManager.CLASSNAME_IMAGE_MAP.put(BloodProp.class.getName(), ImageManager.BLOOD_PROP_IMAGE);\r\n        ImageManager.CLASSNAME_IMAGE_MAP.put(BombProp.class.getName(), ImageManager.BOMB_PROP_IMAGE);\r\n        ImageManager.CLASSNAME_IMAGE_MAP.put(BulletProp.class.getName(), ImageManager.BULLET_PROP_IMAGE);\r\n    }\r\n\r\n    public void draw () {\r\n        //画布滚动\r\n        canvasRolling();\r\n\r\n        //绘制子弹\r\n        paintImageWithPositionRevised(canvas,enemyBullets);\r\n        paintImageWithPositionRevised(canvas,heroBullets);\r\n        paintImageWithPositionRevised(canvas,props);\r\n\r\n        //绘制敌机\r\n        paintImageWithPositionRevised(canvas,enemyAircrafts);\r\n\r\n//        绘制英雄机\r\n        canvas.drawBitmap(ImageManager.HERO_IMAGE,\r\n                heroAircraft.getLocationX()-ImageManager.HERO_IMAGE.getWidth() / 2,\r\n                heroAircraft.getLocationY()-ImageManager.HERO_IMAGE.getHeight()/2,mPaint);\r\n\r\n        //绘制得分和生命值\r\n                paintScoreAndLife(canvas);\r\n\r\n        //通过unlockCanvasAndPost(mCanvas)方法对画布内容进行提交\r\n        mSurfaceHolder.unlockCanvasAndPost(canvas);\r\n\r\n    }\r\n\r\n    private void paintImageWithPositionRevised(Canvas canvas, List<? extends AbstractFlyingObject> objects) {\r\n        if (objects.size() == 0) {\r\n            return;\r\n        }\r\n        for (int i=0;i<objects.size();i++) {\r\n            Bitmap image = objects.get(i).getImage();\r\n            assert image != null : objects.getClass().getName() + \" has no image! \";\r\n\r\n            canvas.drawBitmap(image, objects.get(i).getLocationX() - image.getWidth() / 2,\r\n                    objects.get(i).getLocationY() - image.getHeight() / 2, mPaint);\r\n\r\n        }\r\n    }\r\n\r\n    private void canvasRolling(){\r\n\r\n        //通过SurfaceHolder对象的lockCanvans()方法，我们可以获取当前的Canvas绘图对象\r\n        canvas = mSurfaceHolder.lockCanvas();\r\n        if (mSurfaceHolder == null || canvas == null) {\r\n            return;\r\n        }\r\n        canvas.drawBitmap(ImageManager.BACKGROUND_IMAGE,0,this.backGroundTop-ImageManager.BACKGROUND_IMAGE.getHeight(),mPaint);\r\n        canvas.drawBitmap(ImageManager.BACKGROUND_IMAGE,0,this.backGroundTop,mPaint);\r\n        this.backGroundTop += 1;\r\n        if(this.backGroundTop >= screenHeight){\r\n            this.backGroundTop = this.backGroundTop-screenHeight;\r\n        }\r\n    }\r\n\r\n    //绘制分数和生命值\r\n    private void paintScoreAndLife(Canvas canvas) {\r\n        int x = 50;\r\n        int y = 200;\r\n        mPaint.setColor(Color.RED);\r\n        mPaint.setTextSize((float) 100.0);\r\n        mPaint.setFakeBoldText(true);\r\n//        g.setFont(new Font(\"SansSerif\", Font.BOLD, 22));\r\n        canvas.drawText(\"SCORE:\" + this.score,x,y,mPaint);\r\n//        g.drawString(\"SCORE:\" + this.score, x, y);\r\n        y = y + 150;\r\n        canvas.drawText(\"LIFE:\" + this.heroAircraft.getHp(),x,y,mPaint);\r\n//        g.drawString(\"LIFE:\" + this.heroAircraft.getHp(), x, y);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void surfaceCreated (@NonNull SurfaceHolder holder){\r\n        new Thread(this).start();\r\n    }\r\n\r\n    @Override\r\n    public void surfaceChanged (@NonNull SurfaceHolder holder,int format, int width, int height)\r\n    {\r\n        screenWidth = width;\r\n        screenHeight = height;\r\n    }\r\n\r\n    @Override\r\n    public void surfaceDestroyed (@NonNull SurfaceHolder holder){\r\n        mbLoop = false;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/testpro/application/GameView.java b/app/src/main/java/com/example/testpro/application/GameView.java
--- a/app/src/main/java/com/example/testpro/application/GameView.java	(revision 323719d9841fa05f141e8f62e33da42b2482b727)
+++ b/app/src/main/java/com/example/testpro/application/GameView.java	(date 1653962745380)
@@ -9,7 +9,6 @@
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Paint;
-import android.media.MediaPlayer;
 import android.os.IBinder;
 import android.util.Log;
 import android.view.SurfaceHolder;
@@ -29,7 +28,6 @@
 import com.example.testpro.bullet.BaseBullet;
 import com.example.testpro.bullet.EnemyBullet;
 import com.example.testpro.bullet.HeroBullet;
-import com.example.testpro.enemy_factory.BossFactory;
 import com.example.testpro.enemy_factory.EliteFactory;
 import com.example.testpro.enemy_factory.EnemyFactory;
 import com.example.testpro.enemy_factory.MobFactory;
@@ -37,7 +35,6 @@
 import com.example.testpro.prop.BloodProp;
 import com.example.testpro.prop.BombProp;
 import com.example.testpro.prop.BulletProp;
-import com.google.androidgamesdk.GameActivity;
 
 import java.util.LinkedList;
 import java.util.List;
@@ -80,7 +77,7 @@
      * 时间间隔(ms)，控制刷新频率
      */
     public int timeInterval = 20;
-    public int time = 0;
+//    public int time = 0;
     /**
      * 周期（ms)
      * 指示子弹的发射、敌机的产生频率
@@ -92,13 +89,11 @@
     protected int bossScoreThreshold = 800 ;
     protected boolean bossDied = true;
     protected boolean bossHappened = false;
-//    protected MusicThread musicThread;
     protected int lastScore;
     protected int cycleTimeFlag=0;
     public static int mode=1;
 
     //音效
-    protected MusicService musicService;
     public static MusicService.MyBinder myBinder;
     private Connect conn;
     private Intent intent;
